
pipeline {
    agent any

    environment {
        GIT_REPO_URL = 'https://github.com/Penny998/CICD-project.git'
        DOCKER_IMAGE_NAME = 'bookstore'
        DOCKER_CONTAINER_NAME = 'bookstoreapp'
    }

    tools {
        maven "Maven-3.9.9"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: "${GIT_REPO_URL}"
            }
        }

        stage('Packaging') {
            steps {
                sh 'mvn clean package -DskipTests=true'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${DOCKER_IMAGE_NAME}:latest -f Dockerfile .'
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Check if a container with the same name already exists
                    def containerExists = sh(
                        script: "docker ps -a --filter name=${DOCKER_CONTAINER_NAME} -q",
                        returnStdout: true
                    ).trim()

                    if (containerExists) {
                        // Stop and remove the old container if it exists
                        sh "docker stop ${DOCKER_CONTAINER_NAME}"
                        sh "docker rm ${DOCKER_CONTAINER_NAME}"
                    }

                    // Run the new container
                    sh """
                        docker run -d --name ${DOCKER_CONTAINER_NAME} -p 8081:8080 ${DOCKER_IMAGE_NAME}:latest
                        docker ps
                        docker ps -a
                    """
                }
            }
        }
    }

    post {
        always {
            sh 'docker images'
        }
        failure {
            script {
                // Ensure the container is stopped and removed if the pipeline fails
                def containerExists = sh(
                    script: "docker ps -a --filter name=${DOCKER_CONTAINER_NAME} -q",
                    returnStdout: true
                ).trim()

                if (containerExists) {
                    sh "docker stop ${DOCKER_CONTAINER_NAME}"
                    sh "docker rm ${DOCKER_CONTAINER_NAME}"
                }
            }
        }
    }
}
